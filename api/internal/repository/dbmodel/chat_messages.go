// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ChatMessage is an object representing the database table.
type ChatMessage struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ConversationID int64     `boil:"conversation_id" json:"conversation_id" toml:"conversation_id" yaml:"conversation_id"`
	SenderUserID   int64     `boil:"sender_user_id" json:"sender_user_id" toml:"sender_user_id" yaml:"sender_user_id"`
	Body           string    `boil:"body" json:"body" toml:"body" yaml:"body"`
	SentAt         time.Time `boil:"sent_at" json:"sent_at" toml:"sent_at" yaml:"sent_at"`

	R *chatMessageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chatMessageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChatMessageColumns = struct {
	ID             string
	ConversationID string
	SenderUserID   string
	Body           string
	SentAt         string
}{
	ID:             "id",
	ConversationID: "conversation_id",
	SenderUserID:   "sender_user_id",
	Body:           "body",
	SentAt:         "sent_at",
}

var ChatMessageTableColumns = struct {
	ID             string
	ConversationID string
	SenderUserID   string
	Body           string
	SentAt         string
}{
	ID:             "chat_messages.id",
	ConversationID: "chat_messages.conversation_id",
	SenderUserID:   "chat_messages.sender_user_id",
	Body:           "chat_messages.body",
	SentAt:         "chat_messages.sent_at",
}

// Generated where

var ChatMessageWhere = struct {
	ID             whereHelperint64
	ConversationID whereHelperint64
	SenderUserID   whereHelperint64
	Body           whereHelperstring
	SentAt         whereHelpertime_Time
}{
	ID:             whereHelperint64{field: "\"chat_messages\".\"id\""},
	ConversationID: whereHelperint64{field: "\"chat_messages\".\"conversation_id\""},
	SenderUserID:   whereHelperint64{field: "\"chat_messages\".\"sender_user_id\""},
	Body:           whereHelperstring{field: "\"chat_messages\".\"body\""},
	SentAt:         whereHelpertime_Time{field: "\"chat_messages\".\"sent_at\""},
}

// ChatMessageRels is where relationship names are stored.
var ChatMessageRels = struct {
	Conversation string
	SenderUser   string
}{
	Conversation: "Conversation",
	SenderUser:   "SenderUser",
}

// chatMessageR is where relationships are stored.
type chatMessageR struct {
	Conversation *ChatConversation `boil:"Conversation" json:"Conversation" toml:"Conversation" yaml:"Conversation"`
	SenderUser   *User             `boil:"SenderUser" json:"SenderUser" toml:"SenderUser" yaml:"SenderUser"`
}

// NewStruct creates a new relationship struct
func (*chatMessageR) NewStruct() *chatMessageR {
	return &chatMessageR{}
}

func (o *ChatMessage) GetConversation() *ChatConversation {
	if o == nil {
		return nil
	}

	return o.R.GetConversation()
}

func (r *chatMessageR) GetConversation() *ChatConversation {
	if r == nil {
		return nil
	}

	return r.Conversation
}

func (o *ChatMessage) GetSenderUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetSenderUser()
}

func (r *chatMessageR) GetSenderUser() *User {
	if r == nil {
		return nil
	}

	return r.SenderUser
}

// chatMessageL is where Load methods for each relationship are stored.
type chatMessageL struct{}

var (
	chatMessageAllColumns            = []string{"id", "conversation_id", "sender_user_id", "body", "sent_at"}
	chatMessageColumnsWithoutDefault = []string{"id", "conversation_id", "sender_user_id", "body"}
	chatMessageColumnsWithDefault    = []string{"sent_at"}
	chatMessagePrimaryKeyColumns     = []string{"id"}
	chatMessageGeneratedColumns      = []string{}
)

type (
	// ChatMessageSlice is an alias for a slice of pointers to ChatMessage.
	// This should almost always be used instead of []ChatMessage.
	ChatMessageSlice []*ChatMessage

	chatMessageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chatMessageType                 = reflect.TypeOf(&ChatMessage{})
	chatMessageMapping              = queries.MakeStructMapping(chatMessageType)
	chatMessagePrimaryKeyMapping, _ = queries.BindMapping(chatMessageType, chatMessageMapping, chatMessagePrimaryKeyColumns)
	chatMessageInsertCacheMut       sync.RWMutex
	chatMessageInsertCache          = make(map[string]insertCache)
	chatMessageUpdateCacheMut       sync.RWMutex
	chatMessageUpdateCache          = make(map[string]updateCache)
	chatMessageUpsertCacheMut       sync.RWMutex
	chatMessageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single chatMessage record from the query.
func (q chatMessageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChatMessage, error) {
	o := &ChatMessage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for chat_messages")
	}

	return o, nil
}

// All returns all ChatMessage records from the query.
func (q chatMessageQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChatMessageSlice, error) {
	var o []*ChatMessage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to ChatMessage slice")
	}

	return o, nil
}

// Count returns the count of all ChatMessage records in the query.
func (q chatMessageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count chat_messages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chatMessageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if chat_messages exists")
	}

	return count > 0, nil
}

// Conversation pointed to by the foreign key.
func (o *ChatMessage) Conversation(mods ...qm.QueryMod) chatConversationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ConversationID),
	}

	queryMods = append(queryMods, mods...)

	return ChatConversations(queryMods...)
}

// SenderUser pointed to by the foreign key.
func (o *ChatMessage) SenderUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SenderUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadConversation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chatMessageL) LoadConversation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChatMessage interface{}, mods queries.Applicator) error {
	var slice []*ChatMessage
	var object *ChatMessage

	if singular {
		var ok bool
		object, ok = maybeChatMessage.(*ChatMessage)
		if !ok {
			object = new(ChatMessage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChatMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChatMessage))
			}
		}
	} else {
		s, ok := maybeChatMessage.(*[]*ChatMessage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChatMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChatMessage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chatMessageR{}
		}
		args[object.ConversationID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatMessageR{}
			}

			args[obj.ConversationID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`chat_conversations`),
		qm.WhereIn(`chat_conversations.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChatConversation")
	}

	var resultSlice []*ChatConversation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChatConversation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chat_conversations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chat_conversations")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Conversation = foreign
		if foreign.R == nil {
			foreign.R = &chatConversationR{}
		}
		foreign.R.ConversationChatMessages = append(foreign.R.ConversationChatMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ConversationID == foreign.ID {
				local.R.Conversation = foreign
				if foreign.R == nil {
					foreign.R = &chatConversationR{}
				}
				foreign.R.ConversationChatMessages = append(foreign.R.ConversationChatMessages, local)
				break
			}
		}
	}

	return nil
}

// LoadSenderUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chatMessageL) LoadSenderUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChatMessage interface{}, mods queries.Applicator) error {
	var slice []*ChatMessage
	var object *ChatMessage

	if singular {
		var ok bool
		object, ok = maybeChatMessage.(*ChatMessage)
		if !ok {
			object = new(ChatMessage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChatMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChatMessage))
			}
		}
	} else {
		s, ok := maybeChatMessage.(*[]*ChatMessage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChatMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChatMessage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chatMessageR{}
		}
		args[object.SenderUserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatMessageR{}
			}

			args[obj.SenderUserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SenderUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SenderUserChatMessages = append(foreign.R.SenderUserChatMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SenderUserID == foreign.ID {
				local.R.SenderUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SenderUserChatMessages = append(foreign.R.SenderUserChatMessages, local)
				break
			}
		}
	}

	return nil
}

// SetConversation of the chatMessage to the related item.
// Sets o.R.Conversation to related.
// Adds o to related.R.ConversationChatMessages.
func (o *ChatMessage) SetConversation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ChatConversation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chat_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"conversation_id"}),
		strmangle.WhereClause("\"", "\"", 2, chatMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ConversationID = related.ID
	if o.R == nil {
		o.R = &chatMessageR{
			Conversation: related,
		}
	} else {
		o.R.Conversation = related
	}

	if related.R == nil {
		related.R = &chatConversationR{
			ConversationChatMessages: ChatMessageSlice{o},
		}
	} else {
		related.R.ConversationChatMessages = append(related.R.ConversationChatMessages, o)
	}

	return nil
}

// SetSenderUser of the chatMessage to the related item.
// Sets o.R.SenderUser to related.
// Adds o to related.R.SenderUserChatMessages.
func (o *ChatMessage) SetSenderUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chat_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sender_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, chatMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SenderUserID = related.ID
	if o.R == nil {
		o.R = &chatMessageR{
			SenderUser: related,
		}
	} else {
		o.R.SenderUser = related
	}

	if related.R == nil {
		related.R = &userR{
			SenderUserChatMessages: ChatMessageSlice{o},
		}
	} else {
		related.R.SenderUserChatMessages = append(related.R.SenderUserChatMessages, o)
	}

	return nil
}

// ChatMessages retrieves all the records using an executor.
func ChatMessages(mods ...qm.QueryMod) chatMessageQuery {
	mods = append(mods, qm.From("\"chat_messages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chat_messages\".*"})
	}

	return chatMessageQuery{q}
}

// FindChatMessage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChatMessage(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ChatMessage, error) {
	chatMessageObj := &ChatMessage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chat_messages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, chatMessageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from chat_messages")
	}

	return chatMessageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChatMessage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no chat_messages provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(chatMessageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chatMessageInsertCacheMut.RLock()
	cache, cached := chatMessageInsertCache[key]
	chatMessageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chatMessageAllColumns,
			chatMessageColumnsWithDefault,
			chatMessageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chatMessageType, chatMessageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chatMessageType, chatMessageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chat_messages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chat_messages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into chat_messages")
	}

	if !cached {
		chatMessageInsertCacheMut.Lock()
		chatMessageInsertCache[key] = cache
		chatMessageInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ChatMessage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChatMessage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	chatMessageUpdateCacheMut.RLock()
	cache, cached := chatMessageUpdateCache[key]
	chatMessageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chatMessageAllColumns,
			chatMessagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update chat_messages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chat_messages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chatMessagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chatMessageType, chatMessageMapping, append(wl, chatMessagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update chat_messages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for chat_messages")
	}

	if !cached {
		chatMessageUpdateCacheMut.Lock()
		chatMessageUpdateCache[key] = cache
		chatMessageUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q chatMessageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for chat_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for chat_messages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChatMessageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chat_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chatMessagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in chatMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all chatMessage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChatMessage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no chat_messages provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(chatMessageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chatMessageUpsertCacheMut.RLock()
	cache, cached := chatMessageUpsertCache[key]
	chatMessageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			chatMessageAllColumns,
			chatMessageColumnsWithDefault,
			chatMessageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chatMessageAllColumns,
			chatMessagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert chat_messages, could not build update column list")
		}

		ret := strmangle.SetComplement(chatMessageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(chatMessagePrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert chat_messages, could not build conflict column list")
			}

			conflict = make([]string, len(chatMessagePrimaryKeyColumns))
			copy(conflict, chatMessagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chat_messages\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(chatMessageType, chatMessageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chatMessageType, chatMessageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert chat_messages")
	}

	if !cached {
		chatMessageUpsertCacheMut.Lock()
		chatMessageUpsertCache[key] = cache
		chatMessageUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ChatMessage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChatMessage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no ChatMessage provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chatMessagePrimaryKeyMapping)
	sql := "DELETE FROM \"chat_messages\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from chat_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for chat_messages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chatMessageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no chatMessageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from chat_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for chat_messages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChatMessageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chat_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chatMessagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from chatMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for chat_messages")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChatMessage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChatMessage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChatMessageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChatMessageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chat_messages\".* FROM \"chat_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chatMessagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in ChatMessageSlice")
	}

	*o = slice

	return nil
}

// ChatMessageExists checks if the ChatMessage row exists.
func ChatMessageExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chat_messages\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if chat_messages exists")
	}

	return exists, nil
}

// Exists checks if the ChatMessage row exists.
func (o *ChatMessage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChatMessageExists(ctx, exec, o.ID)
}
