// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ChatConversation is an object representing the database table.
type ChatConversation struct {
	ID              int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ApplicantUserID int64     `boil:"applicant_user_id" json:"applicant_user_id" toml:"applicant_user_id" yaml:"applicant_user_id"`
	TaUserID        int64     `boil:"ta_user_id" json:"ta_user_id" toml:"ta_user_id" yaml:"ta_user_id"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *chatConversationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chatConversationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChatConversationColumns = struct {
	ID              string
	ApplicantUserID string
	TaUserID        string
	CreatedAt       string
}{
	ID:              "id",
	ApplicantUserID: "applicant_user_id",
	TaUserID:        "ta_user_id",
	CreatedAt:       "created_at",
}

var ChatConversationTableColumns = struct {
	ID              string
	ApplicantUserID string
	TaUserID        string
	CreatedAt       string
}{
	ID:              "chat_conversations.id",
	ApplicantUserID: "chat_conversations.applicant_user_id",
	TaUserID:        "chat_conversations.ta_user_id",
	CreatedAt:       "chat_conversations.created_at",
}

// Generated where

var ChatConversationWhere = struct {
	ID              whereHelperint64
	ApplicantUserID whereHelperint64
	TaUserID        whereHelperint64
	CreatedAt       whereHelpertime_Time
}{
	ID:              whereHelperint64{field: "\"chat_conversations\".\"id\""},
	ApplicantUserID: whereHelperint64{field: "\"chat_conversations\".\"applicant_user_id\""},
	TaUserID:        whereHelperint64{field: "\"chat_conversations\".\"ta_user_id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"chat_conversations\".\"created_at\""},
}

// ChatConversationRels is where relationship names are stored.
var ChatConversationRels = struct {
	ApplicantUser            string
	TaUser                   string
	ConversationChatMessages string
}{
	ApplicantUser:            "ApplicantUser",
	TaUser:                   "TaUser",
	ConversationChatMessages: "ConversationChatMessages",
}

// chatConversationR is where relationships are stored.
type chatConversationR struct {
	ApplicantUser            *User            `boil:"ApplicantUser" json:"ApplicantUser" toml:"ApplicantUser" yaml:"ApplicantUser"`
	TaUser                   *User            `boil:"TaUser" json:"TaUser" toml:"TaUser" yaml:"TaUser"`
	ConversationChatMessages ChatMessageSlice `boil:"ConversationChatMessages" json:"ConversationChatMessages" toml:"ConversationChatMessages" yaml:"ConversationChatMessages"`
}

// NewStruct creates a new relationship struct
func (*chatConversationR) NewStruct() *chatConversationR {
	return &chatConversationR{}
}

func (o *ChatConversation) GetApplicantUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetApplicantUser()
}

func (r *chatConversationR) GetApplicantUser() *User {
	if r == nil {
		return nil
	}

	return r.ApplicantUser
}

func (o *ChatConversation) GetTaUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetTaUser()
}

func (r *chatConversationR) GetTaUser() *User {
	if r == nil {
		return nil
	}

	return r.TaUser
}

func (o *ChatConversation) GetConversationChatMessages() ChatMessageSlice {
	if o == nil {
		return nil
	}

	return o.R.GetConversationChatMessages()
}

func (r *chatConversationR) GetConversationChatMessages() ChatMessageSlice {
	if r == nil {
		return nil
	}

	return r.ConversationChatMessages
}

// chatConversationL is where Load methods for each relationship are stored.
type chatConversationL struct{}

var (
	chatConversationAllColumns            = []string{"id", "applicant_user_id", "ta_user_id", "created_at"}
	chatConversationColumnsWithoutDefault = []string{"id", "applicant_user_id", "ta_user_id"}
	chatConversationColumnsWithDefault    = []string{"created_at"}
	chatConversationPrimaryKeyColumns     = []string{"id"}
	chatConversationGeneratedColumns      = []string{}
)

type (
	// ChatConversationSlice is an alias for a slice of pointers to ChatConversation.
	// This should almost always be used instead of []ChatConversation.
	ChatConversationSlice []*ChatConversation

	chatConversationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chatConversationType                 = reflect.TypeOf(&ChatConversation{})
	chatConversationMapping              = queries.MakeStructMapping(chatConversationType)
	chatConversationPrimaryKeyMapping, _ = queries.BindMapping(chatConversationType, chatConversationMapping, chatConversationPrimaryKeyColumns)
	chatConversationInsertCacheMut       sync.RWMutex
	chatConversationInsertCache          = make(map[string]insertCache)
	chatConversationUpdateCacheMut       sync.RWMutex
	chatConversationUpdateCache          = make(map[string]updateCache)
	chatConversationUpsertCacheMut       sync.RWMutex
	chatConversationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single chatConversation record from the query.
func (q chatConversationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChatConversation, error) {
	o := &ChatConversation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for chat_conversations")
	}

	return o, nil
}

// All returns all ChatConversation records from the query.
func (q chatConversationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChatConversationSlice, error) {
	var o []*ChatConversation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to ChatConversation slice")
	}

	return o, nil
}

// Count returns the count of all ChatConversation records in the query.
func (q chatConversationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count chat_conversations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chatConversationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if chat_conversations exists")
	}

	return count > 0, nil
}

// ApplicantUser pointed to by the foreign key.
func (o *ChatConversation) ApplicantUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ApplicantUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// TaUser pointed to by the foreign key.
func (o *ChatConversation) TaUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TaUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// ConversationChatMessages retrieves all the chat_message's ChatMessages with an executor via conversation_id column.
func (o *ChatConversation) ConversationChatMessages(mods ...qm.QueryMod) chatMessageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chat_messages\".\"conversation_id\"=?", o.ID),
	)

	return ChatMessages(queryMods...)
}

// LoadApplicantUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chatConversationL) LoadApplicantUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChatConversation interface{}, mods queries.Applicator) error {
	var slice []*ChatConversation
	var object *ChatConversation

	if singular {
		var ok bool
		object, ok = maybeChatConversation.(*ChatConversation)
		if !ok {
			object = new(ChatConversation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChatConversation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChatConversation))
			}
		}
	} else {
		s, ok := maybeChatConversation.(*[]*ChatConversation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChatConversation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChatConversation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chatConversationR{}
		}
		args[object.ApplicantUserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatConversationR{}
			}

			args[obj.ApplicantUserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ApplicantUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ApplicantUserChatConversations = append(foreign.R.ApplicantUserChatConversations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ApplicantUserID == foreign.ID {
				local.R.ApplicantUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ApplicantUserChatConversations = append(foreign.R.ApplicantUserChatConversations, local)
				break
			}
		}
	}

	return nil
}

// LoadTaUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chatConversationL) LoadTaUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChatConversation interface{}, mods queries.Applicator) error {
	var slice []*ChatConversation
	var object *ChatConversation

	if singular {
		var ok bool
		object, ok = maybeChatConversation.(*ChatConversation)
		if !ok {
			object = new(ChatConversation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChatConversation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChatConversation))
			}
		}
	} else {
		s, ok := maybeChatConversation.(*[]*ChatConversation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChatConversation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChatConversation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chatConversationR{}
		}
		args[object.TaUserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatConversationR{}
			}

			args[obj.TaUserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TaUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.TaUserChatConversations = append(foreign.R.TaUserChatConversations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TaUserID == foreign.ID {
				local.R.TaUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.TaUserChatConversations = append(foreign.R.TaUserChatConversations, local)
				break
			}
		}
	}

	return nil
}

// LoadConversationChatMessages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chatConversationL) LoadConversationChatMessages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChatConversation interface{}, mods queries.Applicator) error {
	var slice []*ChatConversation
	var object *ChatConversation

	if singular {
		var ok bool
		object, ok = maybeChatConversation.(*ChatConversation)
		if !ok {
			object = new(ChatConversation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChatConversation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChatConversation))
			}
		}
	} else {
		s, ok := maybeChatConversation.(*[]*ChatConversation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChatConversation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChatConversation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chatConversationR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatConversationR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`chat_messages`),
		qm.WhereIn(`chat_messages.conversation_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chat_messages")
	}

	var resultSlice []*ChatMessage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chat_messages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chat_messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chat_messages")
	}

	if singular {
		object.R.ConversationChatMessages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chatMessageR{}
			}
			foreign.R.Conversation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ConversationID {
				local.R.ConversationChatMessages = append(local.R.ConversationChatMessages, foreign)
				if foreign.R == nil {
					foreign.R = &chatMessageR{}
				}
				foreign.R.Conversation = local
				break
			}
		}
	}

	return nil
}

// SetApplicantUser of the chatConversation to the related item.
// Sets o.R.ApplicantUser to related.
// Adds o to related.R.ApplicantUserChatConversations.
func (o *ChatConversation) SetApplicantUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chat_conversations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"applicant_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, chatConversationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ApplicantUserID = related.ID
	if o.R == nil {
		o.R = &chatConversationR{
			ApplicantUser: related,
		}
	} else {
		o.R.ApplicantUser = related
	}

	if related.R == nil {
		related.R = &userR{
			ApplicantUserChatConversations: ChatConversationSlice{o},
		}
	} else {
		related.R.ApplicantUserChatConversations = append(related.R.ApplicantUserChatConversations, o)
	}

	return nil
}

// SetTaUser of the chatConversation to the related item.
// Sets o.R.TaUser to related.
// Adds o to related.R.TaUserChatConversations.
func (o *ChatConversation) SetTaUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chat_conversations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ta_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, chatConversationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TaUserID = related.ID
	if o.R == nil {
		o.R = &chatConversationR{
			TaUser: related,
		}
	} else {
		o.R.TaUser = related
	}

	if related.R == nil {
		related.R = &userR{
			TaUserChatConversations: ChatConversationSlice{o},
		}
	} else {
		related.R.TaUserChatConversations = append(related.R.TaUserChatConversations, o)
	}

	return nil
}

// AddConversationChatMessages adds the given related objects to the existing relationships
// of the chat_conversation, optionally inserting them as new records.
// Appends related to o.R.ConversationChatMessages.
// Sets related.R.Conversation appropriately.
func (o *ChatConversation) AddConversationChatMessages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChatMessage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConversationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chat_messages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"conversation_id"}),
				strmangle.WhereClause("\"", "\"", 2, chatMessagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConversationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &chatConversationR{
			ConversationChatMessages: related,
		}
	} else {
		o.R.ConversationChatMessages = append(o.R.ConversationChatMessages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chatMessageR{
				Conversation: o,
			}
		} else {
			rel.R.Conversation = o
		}
	}
	return nil
}

// ChatConversations retrieves all the records using an executor.
func ChatConversations(mods ...qm.QueryMod) chatConversationQuery {
	mods = append(mods, qm.From("\"chat_conversations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chat_conversations\".*"})
	}

	return chatConversationQuery{q}
}

// FindChatConversation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChatConversation(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ChatConversation, error) {
	chatConversationObj := &ChatConversation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chat_conversations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, chatConversationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from chat_conversations")
	}

	return chatConversationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChatConversation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no chat_conversations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(chatConversationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chatConversationInsertCacheMut.RLock()
	cache, cached := chatConversationInsertCache[key]
	chatConversationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chatConversationAllColumns,
			chatConversationColumnsWithDefault,
			chatConversationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chatConversationType, chatConversationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chatConversationType, chatConversationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chat_conversations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chat_conversations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into chat_conversations")
	}

	if !cached {
		chatConversationInsertCacheMut.Lock()
		chatConversationInsertCache[key] = cache
		chatConversationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ChatConversation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChatConversation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	chatConversationUpdateCacheMut.RLock()
	cache, cached := chatConversationUpdateCache[key]
	chatConversationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chatConversationAllColumns,
			chatConversationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update chat_conversations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chat_conversations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chatConversationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chatConversationType, chatConversationMapping, append(wl, chatConversationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update chat_conversations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for chat_conversations")
	}

	if !cached {
		chatConversationUpdateCacheMut.Lock()
		chatConversationUpdateCache[key] = cache
		chatConversationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q chatConversationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for chat_conversations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for chat_conversations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChatConversationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatConversationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chat_conversations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chatConversationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in chatConversation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all chatConversation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChatConversation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no chat_conversations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(chatConversationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chatConversationUpsertCacheMut.RLock()
	cache, cached := chatConversationUpsertCache[key]
	chatConversationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			chatConversationAllColumns,
			chatConversationColumnsWithDefault,
			chatConversationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chatConversationAllColumns,
			chatConversationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert chat_conversations, could not build update column list")
		}

		ret := strmangle.SetComplement(chatConversationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(chatConversationPrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert chat_conversations, could not build conflict column list")
			}

			conflict = make([]string, len(chatConversationPrimaryKeyColumns))
			copy(conflict, chatConversationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chat_conversations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(chatConversationType, chatConversationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chatConversationType, chatConversationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert chat_conversations")
	}

	if !cached {
		chatConversationUpsertCacheMut.Lock()
		chatConversationUpsertCache[key] = cache
		chatConversationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ChatConversation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChatConversation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no ChatConversation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chatConversationPrimaryKeyMapping)
	sql := "DELETE FROM \"chat_conversations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from chat_conversations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for chat_conversations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chatConversationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no chatConversationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from chat_conversations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for chat_conversations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChatConversationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatConversationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chat_conversations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chatConversationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from chatConversation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for chat_conversations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChatConversation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChatConversation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChatConversationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChatConversationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatConversationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chat_conversations\".* FROM \"chat_conversations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chatConversationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in ChatConversationSlice")
	}

	*o = slice

	return nil
}

// ChatConversationExists checks if the ChatConversation row exists.
func ChatConversationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chat_conversations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if chat_conversations exists")
	}

	return exists, nil
}

// Exists checks if the ChatConversation row exists.
func (o *ChatConversation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChatConversationExists(ctx, exec, o.ID)
}
