// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Candidate is an object representing the database table.
type Candidate struct {
	ID              int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID          int64     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Headline        string    `boil:"headline" json:"headline" toml:"headline" yaml:"headline"`
	Summary         string    `boil:"summary" json:"summary" toml:"summary" yaml:"summary"`
	YearsExperience int16     `boil:"years_experience" json:"years_experience" toml:"years_experience" yaml:"years_experience"`
	Location        string    `boil:"location" json:"location" toml:"location" yaml:"location"`
	CVURL           string    `boil:"cv_url" json:"cv_url" toml:"cv_url" yaml:"cv_url"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *candidateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L candidateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CandidateColumns = struct {
	ID              string
	UserID          string
	Headline        string
	Summary         string
	YearsExperience string
	Location        string
	CVURL           string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "id",
	UserID:          "user_id",
	Headline:        "headline",
	Summary:         "summary",
	YearsExperience: "years_experience",
	Location:        "location",
	CVURL:           "cv_url",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var CandidateTableColumns = struct {
	ID              string
	UserID          string
	Headline        string
	Summary         string
	YearsExperience string
	Location        string
	CVURL           string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "candidates.id",
	UserID:          "candidates.user_id",
	Headline:        "candidates.headline",
	Summary:         "candidates.summary",
	YearsExperience: "candidates.years_experience",
	Location:        "candidates.location",
	CVURL:           "candidates.cv_url",
	CreatedAt:       "candidates.created_at",
	UpdatedAt:       "candidates.updated_at",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CandidateWhere = struct {
	ID              whereHelperint64
	UserID          whereHelperint64
	Headline        whereHelperstring
	Summary         whereHelperstring
	YearsExperience whereHelperint16
	Location        whereHelperstring
	CVURL           whereHelperstring
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
}{
	ID:              whereHelperint64{field: "\"candidates\".\"id\""},
	UserID:          whereHelperint64{field: "\"candidates\".\"user_id\""},
	Headline:        whereHelperstring{field: "\"candidates\".\"headline\""},
	Summary:         whereHelperstring{field: "\"candidates\".\"summary\""},
	YearsExperience: whereHelperint16{field: "\"candidates\".\"years_experience\""},
	Location:        whereHelperstring{field: "\"candidates\".\"location\""},
	CVURL:           whereHelperstring{field: "\"candidates\".\"cv_url\""},
	CreatedAt:       whereHelpertime_Time{field: "\"candidates\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"candidates\".\"updated_at\""},
}

// CandidateRels is where relationship names are stored.
var CandidateRels = struct {
	User            string
	Alerts          string
	JobApplications string
	UploadFiles     string
}{
	User:            "User",
	Alerts:          "Alerts",
	JobApplications: "JobApplications",
	UploadFiles:     "UploadFiles",
}

// candidateR is where relationships are stored.
type candidateR struct {
	User            *User               `boil:"User" json:"User" toml:"User" yaml:"User"`
	Alerts          AlertSlice          `boil:"Alerts" json:"Alerts" toml:"Alerts" yaml:"Alerts"`
	JobApplications JobApplicationSlice `boil:"JobApplications" json:"JobApplications" toml:"JobApplications" yaml:"JobApplications"`
	UploadFiles     UploadFileSlice     `boil:"UploadFiles" json:"UploadFiles" toml:"UploadFiles" yaml:"UploadFiles"`
}

// NewStruct creates a new relationship struct
func (*candidateR) NewStruct() *candidateR {
	return &candidateR{}
}

func (o *Candidate) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *candidateR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

func (o *Candidate) GetAlerts() AlertSlice {
	if o == nil {
		return nil
	}

	return o.R.GetAlerts()
}

func (r *candidateR) GetAlerts() AlertSlice {
	if r == nil {
		return nil
	}

	return r.Alerts
}

func (o *Candidate) GetJobApplications() JobApplicationSlice {
	if o == nil {
		return nil
	}

	return o.R.GetJobApplications()
}

func (r *candidateR) GetJobApplications() JobApplicationSlice {
	if r == nil {
		return nil
	}

	return r.JobApplications
}

func (o *Candidate) GetUploadFiles() UploadFileSlice {
	if o == nil {
		return nil
	}

	return o.R.GetUploadFiles()
}

func (r *candidateR) GetUploadFiles() UploadFileSlice {
	if r == nil {
		return nil
	}

	return r.UploadFiles
}

// candidateL is where Load methods for each relationship are stored.
type candidateL struct{}

var (
	candidateAllColumns            = []string{"id", "user_id", "headline", "summary", "years_experience", "location", "cv_url", "created_at", "updated_at"}
	candidateColumnsWithoutDefault = []string{"id", "user_id"}
	candidateColumnsWithDefault    = []string{"headline", "summary", "years_experience", "location", "cv_url", "created_at", "updated_at"}
	candidatePrimaryKeyColumns     = []string{"id"}
	candidateGeneratedColumns      = []string{}
)

type (
	// CandidateSlice is an alias for a slice of pointers to Candidate.
	// This should almost always be used instead of []Candidate.
	CandidateSlice []*Candidate

	candidateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	candidateType                 = reflect.TypeOf(&Candidate{})
	candidateMapping              = queries.MakeStructMapping(candidateType)
	candidatePrimaryKeyMapping, _ = queries.BindMapping(candidateType, candidateMapping, candidatePrimaryKeyColumns)
	candidateInsertCacheMut       sync.RWMutex
	candidateInsertCache          = make(map[string]insertCache)
	candidateUpdateCacheMut       sync.RWMutex
	candidateUpdateCache          = make(map[string]updateCache)
	candidateUpsertCacheMut       sync.RWMutex
	candidateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single candidate record from the query.
func (q candidateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Candidate, error) {
	o := &Candidate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for candidates")
	}

	return o, nil
}

// All returns all Candidate records from the query.
func (q candidateQuery) All(ctx context.Context, exec boil.ContextExecutor) (CandidateSlice, error) {
	var o []*Candidate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to Candidate slice")
	}

	return o, nil
}

// Count returns the count of all Candidate records in the query.
func (q candidateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count candidates rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q candidateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if candidates exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Candidate) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Alerts retrieves all the alert's Alerts with an executor.
func (o *Candidate) Alerts(mods ...qm.QueryMod) alertQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alerts\".\"candidate_id\"=?", o.ID),
	)

	return Alerts(queryMods...)
}

// JobApplications retrieves all the job_application's JobApplications with an executor.
func (o *Candidate) JobApplications(mods ...qm.QueryMod) jobApplicationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"job_applications\".\"candidate_id\"=?", o.ID),
	)

	return JobApplications(queryMods...)
}

// UploadFiles retrieves all the upload_file's UploadFiles with an executor.
func (o *Candidate) UploadFiles(mods ...qm.QueryMod) uploadFileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"upload_files\".\"candidate_id\"=?", o.ID),
	)

	return UploadFiles(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (candidateL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCandidate interface{}, mods queries.Applicator) error {
	var slice []*Candidate
	var object *Candidate

	if singular {
		var ok bool
		object, ok = maybeCandidate.(*Candidate)
		if !ok {
			object = new(Candidate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCandidate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCandidate))
			}
		}
	} else {
		s, ok := maybeCandidate.(*[]*Candidate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCandidate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCandidate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &candidateR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &candidateR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Candidate = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Candidate = local
				break
			}
		}
	}

	return nil
}

// LoadAlerts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (candidateL) LoadAlerts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCandidate interface{}, mods queries.Applicator) error {
	var slice []*Candidate
	var object *Candidate

	if singular {
		var ok bool
		object, ok = maybeCandidate.(*Candidate)
		if !ok {
			object = new(Candidate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCandidate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCandidate))
			}
		}
	} else {
		s, ok := maybeCandidate.(*[]*Candidate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCandidate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCandidate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &candidateR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &candidateR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`alerts`),
		qm.WhereIn(`alerts.candidate_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load alerts")
	}

	var resultSlice []*Alert
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice alerts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on alerts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for alerts")
	}

	if singular {
		object.R.Alerts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &alertR{}
			}
			foreign.R.Candidate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CandidateID {
				local.R.Alerts = append(local.R.Alerts, foreign)
				if foreign.R == nil {
					foreign.R = &alertR{}
				}
				foreign.R.Candidate = local
				break
			}
		}
	}

	return nil
}

// LoadJobApplications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (candidateL) LoadJobApplications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCandidate interface{}, mods queries.Applicator) error {
	var slice []*Candidate
	var object *Candidate

	if singular {
		var ok bool
		object, ok = maybeCandidate.(*Candidate)
		if !ok {
			object = new(Candidate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCandidate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCandidate))
			}
		}
	} else {
		s, ok := maybeCandidate.(*[]*Candidate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCandidate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCandidate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &candidateR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &candidateR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`job_applications`),
		qm.WhereIn(`job_applications.candidate_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load job_applications")
	}

	var resultSlice []*JobApplication
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice job_applications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on job_applications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for job_applications")
	}

	if singular {
		object.R.JobApplications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &jobApplicationR{}
			}
			foreign.R.Candidate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CandidateID {
				local.R.JobApplications = append(local.R.JobApplications, foreign)
				if foreign.R == nil {
					foreign.R = &jobApplicationR{}
				}
				foreign.R.Candidate = local
				break
			}
		}
	}

	return nil
}

// LoadUploadFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (candidateL) LoadUploadFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCandidate interface{}, mods queries.Applicator) error {
	var slice []*Candidate
	var object *Candidate

	if singular {
		var ok bool
		object, ok = maybeCandidate.(*Candidate)
		if !ok {
			object = new(Candidate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCandidate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCandidate))
			}
		}
	} else {
		s, ok := maybeCandidate.(*[]*Candidate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCandidate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCandidate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &candidateR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &candidateR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`upload_files`),
		qm.WhereIn(`upload_files.candidate_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upload_files")
	}

	var resultSlice []*UploadFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upload_files")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on upload_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for upload_files")
	}

	if singular {
		object.R.UploadFiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &uploadFileR{}
			}
			foreign.R.Candidate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CandidateID {
				local.R.UploadFiles = append(local.R.UploadFiles, foreign)
				if foreign.R == nil {
					foreign.R = &uploadFileR{}
				}
				foreign.R.Candidate = local
				break
			}
		}
	}

	return nil
}

// SetUser of the candidate to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Candidate.
func (o *Candidate) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"candidates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, candidatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &candidateR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Candidate: o,
		}
	} else {
		related.R.Candidate = o
	}

	return nil
}

// AddAlerts adds the given related objects to the existing relationships
// of the candidate, optionally inserting them as new records.
// Appends related to o.R.Alerts.
// Sets related.R.Candidate appropriately.
func (o *Candidate) AddAlerts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Alert) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CandidateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alerts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"candidate_id"}),
				strmangle.WhereClause("\"", "\"", 2, alertPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CandidateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &candidateR{
			Alerts: related,
		}
	} else {
		o.R.Alerts = append(o.R.Alerts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &alertR{
				Candidate: o,
			}
		} else {
			rel.R.Candidate = o
		}
	}
	return nil
}

// AddJobApplications adds the given related objects to the existing relationships
// of the candidate, optionally inserting them as new records.
// Appends related to o.R.JobApplications.
// Sets related.R.Candidate appropriately.
func (o *Candidate) AddJobApplications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JobApplication) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CandidateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"job_applications\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"candidate_id"}),
				strmangle.WhereClause("\"", "\"", 2, jobApplicationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CandidateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &candidateR{
			JobApplications: related,
		}
	} else {
		o.R.JobApplications = append(o.R.JobApplications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &jobApplicationR{
				Candidate: o,
			}
		} else {
			rel.R.Candidate = o
		}
	}
	return nil
}

// AddUploadFiles adds the given related objects to the existing relationships
// of the candidate, optionally inserting them as new records.
// Appends related to o.R.UploadFiles.
// Sets related.R.Candidate appropriately.
func (o *Candidate) AddUploadFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UploadFile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CandidateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"upload_files\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"candidate_id"}),
				strmangle.WhereClause("\"", "\"", 2, uploadFilePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CandidateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &candidateR{
			UploadFiles: related,
		}
	} else {
		o.R.UploadFiles = append(o.R.UploadFiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &uploadFileR{
				Candidate: o,
			}
		} else {
			rel.R.Candidate = o
		}
	}
	return nil
}

// Candidates retrieves all the records using an executor.
func Candidates(mods ...qm.QueryMod) candidateQuery {
	mods = append(mods, qm.From("\"candidates\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"candidates\".*"})
	}

	return candidateQuery{q}
}

// FindCandidate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCandidate(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Candidate, error) {
	candidateObj := &Candidate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"candidates\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, candidateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from candidates")
	}

	return candidateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Candidate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no candidates provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(candidateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	candidateInsertCacheMut.RLock()
	cache, cached := candidateInsertCache[key]
	candidateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			candidateAllColumns,
			candidateColumnsWithDefault,
			candidateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(candidateType, candidateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(candidateType, candidateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"candidates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"candidates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into candidates")
	}

	if !cached {
		candidateInsertCacheMut.Lock()
		candidateInsertCache[key] = cache
		candidateInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Candidate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Candidate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	candidateUpdateCacheMut.RLock()
	cache, cached := candidateUpdateCache[key]
	candidateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			candidateAllColumns,
			candidatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update candidates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"candidates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, candidatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(candidateType, candidateMapping, append(wl, candidatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update candidates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for candidates")
	}

	if !cached {
		candidateUpdateCacheMut.Lock()
		candidateUpdateCache[key] = cache
		candidateUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q candidateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for candidates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for candidates")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CandidateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), candidatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"candidates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, candidatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in candidate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all candidate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Candidate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no candidates provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(candidateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	candidateUpsertCacheMut.RLock()
	cache, cached := candidateUpsertCache[key]
	candidateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			candidateAllColumns,
			candidateColumnsWithDefault,
			candidateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			candidateAllColumns,
			candidatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert candidates, could not build update column list")
		}

		ret := strmangle.SetComplement(candidateAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(candidatePrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert candidates, could not build conflict column list")
			}

			conflict = make([]string, len(candidatePrimaryKeyColumns))
			copy(conflict, candidatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"candidates\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(candidateType, candidateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(candidateType, candidateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert candidates")
	}

	if !cached {
		candidateUpsertCacheMut.Lock()
		candidateUpsertCache[key] = cache
		candidateUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Candidate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Candidate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no Candidate provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), candidatePrimaryKeyMapping)
	sql := "DELETE FROM \"candidates\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from candidates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for candidates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q candidateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no candidateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from candidates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for candidates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CandidateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), candidatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"candidates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, candidatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from candidate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for candidates")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Candidate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCandidate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CandidateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CandidateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), candidatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"candidates\".* FROM \"candidates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, candidatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in CandidateSlice")
	}

	*o = slice

	return nil
}

// CandidateExists checks if the Candidate row exists.
func CandidateExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"candidates\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if candidates exists")
	}

	return exists, nil
}

// Exists checks if the Candidate row exists.
func (o *Candidate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CandidateExists(ctx, exec, o.ID)
}
