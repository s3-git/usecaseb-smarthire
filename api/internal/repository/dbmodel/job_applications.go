// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// JobApplication is an object representing the database table.
type JobApplication struct {
	ID                     int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	CandidateID            int64             `boil:"candidate_id" json:"candidate_id" toml:"candidate_id" yaml:"candidate_id"`
	JobID                  int64             `boil:"job_id" json:"job_id" toml:"job_id" yaml:"job_id"`
	Title                  string            `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description            string            `boil:"description" json:"description" toml:"description" yaml:"description"`
	Status                 string            `boil:"status" json:"status" toml:"status" yaml:"status"`
	SourceType             null.String       `boil:"source_type" json:"source_type,omitempty" toml:"source_type" yaml:"source_type,omitempty"`
	PipelineStage          string            `boil:"pipeline_stage" json:"pipeline_stage" toml:"pipeline_stage" yaml:"pipeline_stage"`
	InterviewScheduledTime null.Time         `boil:"interview_scheduled_time" json:"interview_scheduled_time,omitempty" toml:"interview_scheduled_time" yaml:"interview_scheduled_time,omitempty"`
	CandidateFeedback      null.String       `boil:"candidate_feedback" json:"candidate_feedback,omitempty" toml:"candidate_feedback" yaml:"candidate_feedback,omitempty"`
	AiRankingScores        types.NullDecimal `boil:"ai_ranking_scores" json:"ai_ranking_scores,omitempty" toml:"ai_ranking_scores" yaml:"ai_ranking_scores,omitempty"`
	CreatedAt              time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt              time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *jobApplicationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jobApplicationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JobApplicationColumns = struct {
	ID                     string
	CandidateID            string
	JobID                  string
	Title                  string
	Description            string
	Status                 string
	SourceType             string
	PipelineStage          string
	InterviewScheduledTime string
	CandidateFeedback      string
	AiRankingScores        string
	CreatedAt              string
	UpdatedAt              string
}{
	ID:                     "id",
	CandidateID:            "candidate_id",
	JobID:                  "job_id",
	Title:                  "title",
	Description:            "description",
	Status:                 "status",
	SourceType:             "source_type",
	PipelineStage:          "pipeline_stage",
	InterviewScheduledTime: "interview_scheduled_time",
	CandidateFeedback:      "candidate_feedback",
	AiRankingScores:        "ai_ranking_scores",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
}

var JobApplicationTableColumns = struct {
	ID                     string
	CandidateID            string
	JobID                  string
	Title                  string
	Description            string
	Status                 string
	SourceType             string
	PipelineStage          string
	InterviewScheduledTime string
	CandidateFeedback      string
	AiRankingScores        string
	CreatedAt              string
	UpdatedAt              string
}{
	ID:                     "job_applications.id",
	CandidateID:            "job_applications.candidate_id",
	JobID:                  "job_applications.job_id",
	Title:                  "job_applications.title",
	Description:            "job_applications.description",
	Status:                 "job_applications.status",
	SourceType:             "job_applications.source_type",
	PipelineStage:          "job_applications.pipeline_stage",
	InterviewScheduledTime: "job_applications.interview_scheduled_time",
	CandidateFeedback:      "job_applications.candidate_feedback",
	AiRankingScores:        "job_applications.ai_ranking_scores",
	CreatedAt:              "job_applications.created_at",
	UpdatedAt:              "job_applications.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var JobApplicationWhere = struct {
	ID                     whereHelperint64
	CandidateID            whereHelperint64
	JobID                  whereHelperint64
	Title                  whereHelperstring
	Description            whereHelperstring
	Status                 whereHelperstring
	SourceType             whereHelpernull_String
	PipelineStage          whereHelperstring
	InterviewScheduledTime whereHelpernull_Time
	CandidateFeedback      whereHelpernull_String
	AiRankingScores        whereHelpertypes_NullDecimal
	CreatedAt              whereHelpertime_Time
	UpdatedAt              whereHelpertime_Time
}{
	ID:                     whereHelperint64{field: "\"job_applications\".\"id\""},
	CandidateID:            whereHelperint64{field: "\"job_applications\".\"candidate_id\""},
	JobID:                  whereHelperint64{field: "\"job_applications\".\"job_id\""},
	Title:                  whereHelperstring{field: "\"job_applications\".\"title\""},
	Description:            whereHelperstring{field: "\"job_applications\".\"description\""},
	Status:                 whereHelperstring{field: "\"job_applications\".\"status\""},
	SourceType:             whereHelpernull_String{field: "\"job_applications\".\"source_type\""},
	PipelineStage:          whereHelperstring{field: "\"job_applications\".\"pipeline_stage\""},
	InterviewScheduledTime: whereHelpernull_Time{field: "\"job_applications\".\"interview_scheduled_time\""},
	CandidateFeedback:      whereHelpernull_String{field: "\"job_applications\".\"candidate_feedback\""},
	AiRankingScores:        whereHelpertypes_NullDecimal{field: "\"job_applications\".\"ai_ranking_scores\""},
	CreatedAt:              whereHelpertime_Time{field: "\"job_applications\".\"created_at\""},
	UpdatedAt:              whereHelpertime_Time{field: "\"job_applications\".\"updated_at\""},
}

// JobApplicationRels is where relationship names are stored.
var JobApplicationRels = struct {
	Candidate string
	Job       string
}{
	Candidate: "Candidate",
	Job:       "Job",
}

// jobApplicationR is where relationships are stored.
type jobApplicationR struct {
	Candidate *Candidate `boil:"Candidate" json:"Candidate" toml:"Candidate" yaml:"Candidate"`
	Job       *Job       `boil:"Job" json:"Job" toml:"Job" yaml:"Job"`
}

// NewStruct creates a new relationship struct
func (*jobApplicationR) NewStruct() *jobApplicationR {
	return &jobApplicationR{}
}

func (o *JobApplication) GetCandidate() *Candidate {
	if o == nil {
		return nil
	}

	return o.R.GetCandidate()
}

func (r *jobApplicationR) GetCandidate() *Candidate {
	if r == nil {
		return nil
	}

	return r.Candidate
}

func (o *JobApplication) GetJob() *Job {
	if o == nil {
		return nil
	}

	return o.R.GetJob()
}

func (r *jobApplicationR) GetJob() *Job {
	if r == nil {
		return nil
	}

	return r.Job
}

// jobApplicationL is where Load methods for each relationship are stored.
type jobApplicationL struct{}

var (
	jobApplicationAllColumns            = []string{"id", "candidate_id", "job_id", "title", "description", "status", "source_type", "pipeline_stage", "interview_scheduled_time", "candidate_feedback", "ai_ranking_scores", "created_at", "updated_at"}
	jobApplicationColumnsWithoutDefault = []string{"id", "candidate_id", "job_id", "title", "description", "status", "pipeline_stage"}
	jobApplicationColumnsWithDefault    = []string{"source_type", "interview_scheduled_time", "candidate_feedback", "ai_ranking_scores", "created_at", "updated_at"}
	jobApplicationPrimaryKeyColumns     = []string{"id"}
	jobApplicationGeneratedColumns      = []string{}
)

type (
	// JobApplicationSlice is an alias for a slice of pointers to JobApplication.
	// This should almost always be used instead of []JobApplication.
	JobApplicationSlice []*JobApplication

	jobApplicationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jobApplicationType                 = reflect.TypeOf(&JobApplication{})
	jobApplicationMapping              = queries.MakeStructMapping(jobApplicationType)
	jobApplicationPrimaryKeyMapping, _ = queries.BindMapping(jobApplicationType, jobApplicationMapping, jobApplicationPrimaryKeyColumns)
	jobApplicationInsertCacheMut       sync.RWMutex
	jobApplicationInsertCache          = make(map[string]insertCache)
	jobApplicationUpdateCacheMut       sync.RWMutex
	jobApplicationUpdateCache          = make(map[string]updateCache)
	jobApplicationUpsertCacheMut       sync.RWMutex
	jobApplicationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single jobApplication record from the query.
func (q jobApplicationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JobApplication, error) {
	o := &JobApplication{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for job_applications")
	}

	return o, nil
}

// All returns all JobApplication records from the query.
func (q jobApplicationQuery) All(ctx context.Context, exec boil.ContextExecutor) (JobApplicationSlice, error) {
	var o []*JobApplication

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to JobApplication slice")
	}

	return o, nil
}

// Count returns the count of all JobApplication records in the query.
func (q jobApplicationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count job_applications rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q jobApplicationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if job_applications exists")
	}

	return count > 0, nil
}

// Candidate pointed to by the foreign key.
func (o *JobApplication) Candidate(mods ...qm.QueryMod) candidateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CandidateID),
	}

	queryMods = append(queryMods, mods...)

	return Candidates(queryMods...)
}

// Job pointed to by the foreign key.
func (o *JobApplication) Job(mods ...qm.QueryMod) jobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.JobID),
	}

	queryMods = append(queryMods, mods...)

	return Jobs(queryMods...)
}

// LoadCandidate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jobApplicationL) LoadCandidate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJobApplication interface{}, mods queries.Applicator) error {
	var slice []*JobApplication
	var object *JobApplication

	if singular {
		var ok bool
		object, ok = maybeJobApplication.(*JobApplication)
		if !ok {
			object = new(JobApplication)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJobApplication)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJobApplication))
			}
		}
	} else {
		s, ok := maybeJobApplication.(*[]*JobApplication)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJobApplication)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJobApplication))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &jobApplicationR{}
		}
		args[object.CandidateID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobApplicationR{}
			}

			args[obj.CandidateID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`candidates`),
		qm.WhereIn(`candidates.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Candidate")
	}

	var resultSlice []*Candidate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Candidate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for candidates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for candidates")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Candidate = foreign
		if foreign.R == nil {
			foreign.R = &candidateR{}
		}
		foreign.R.JobApplications = append(foreign.R.JobApplications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CandidateID == foreign.ID {
				local.R.Candidate = foreign
				if foreign.R == nil {
					foreign.R = &candidateR{}
				}
				foreign.R.JobApplications = append(foreign.R.JobApplications, local)
				break
			}
		}
	}

	return nil
}

// LoadJob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jobApplicationL) LoadJob(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJobApplication interface{}, mods queries.Applicator) error {
	var slice []*JobApplication
	var object *JobApplication

	if singular {
		var ok bool
		object, ok = maybeJobApplication.(*JobApplication)
		if !ok {
			object = new(JobApplication)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJobApplication)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJobApplication))
			}
		}
	} else {
		s, ok := maybeJobApplication.(*[]*JobApplication)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJobApplication)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJobApplication))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &jobApplicationR{}
		}
		args[object.JobID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobApplicationR{}
			}

			args[obj.JobID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`jobs`),
		qm.WhereIn(`jobs.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Job")
	}

	var resultSlice []*Job
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Job")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for jobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for jobs")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Job = foreign
		if foreign.R == nil {
			foreign.R = &jobR{}
		}
		foreign.R.JobApplications = append(foreign.R.JobApplications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.JobID == foreign.ID {
				local.R.Job = foreign
				if foreign.R == nil {
					foreign.R = &jobR{}
				}
				foreign.R.JobApplications = append(foreign.R.JobApplications, local)
				break
			}
		}
	}

	return nil
}

// SetCandidate of the jobApplication to the related item.
// Sets o.R.Candidate to related.
// Adds o to related.R.JobApplications.
func (o *JobApplication) SetCandidate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Candidate) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"job_applications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"candidate_id"}),
		strmangle.WhereClause("\"", "\"", 2, jobApplicationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CandidateID = related.ID
	if o.R == nil {
		o.R = &jobApplicationR{
			Candidate: related,
		}
	} else {
		o.R.Candidate = related
	}

	if related.R == nil {
		related.R = &candidateR{
			JobApplications: JobApplicationSlice{o},
		}
	} else {
		related.R.JobApplications = append(related.R.JobApplications, o)
	}

	return nil
}

// SetJob of the jobApplication to the related item.
// Sets o.R.Job to related.
// Adds o to related.R.JobApplications.
func (o *JobApplication) SetJob(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Job) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"job_applications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"job_id"}),
		strmangle.WhereClause("\"", "\"", 2, jobApplicationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.JobID = related.ID
	if o.R == nil {
		o.R = &jobApplicationR{
			Job: related,
		}
	} else {
		o.R.Job = related
	}

	if related.R == nil {
		related.R = &jobR{
			JobApplications: JobApplicationSlice{o},
		}
	} else {
		related.R.JobApplications = append(related.R.JobApplications, o)
	}

	return nil
}

// JobApplications retrieves all the records using an executor.
func JobApplications(mods ...qm.QueryMod) jobApplicationQuery {
	mods = append(mods, qm.From("\"job_applications\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"job_applications\".*"})
	}

	return jobApplicationQuery{q}
}

// FindJobApplication retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJobApplication(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*JobApplication, error) {
	jobApplicationObj := &JobApplication{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"job_applications\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, jobApplicationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from job_applications")
	}

	return jobApplicationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JobApplication) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no job_applications provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(jobApplicationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jobApplicationInsertCacheMut.RLock()
	cache, cached := jobApplicationInsertCache[key]
	jobApplicationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jobApplicationAllColumns,
			jobApplicationColumnsWithDefault,
			jobApplicationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jobApplicationType, jobApplicationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jobApplicationType, jobApplicationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"job_applications\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"job_applications\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into job_applications")
	}

	if !cached {
		jobApplicationInsertCacheMut.Lock()
		jobApplicationInsertCache[key] = cache
		jobApplicationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the JobApplication.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JobApplication) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	jobApplicationUpdateCacheMut.RLock()
	cache, cached := jobApplicationUpdateCache[key]
	jobApplicationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jobApplicationAllColumns,
			jobApplicationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update job_applications, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"job_applications\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, jobApplicationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jobApplicationType, jobApplicationMapping, append(wl, jobApplicationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update job_applications row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for job_applications")
	}

	if !cached {
		jobApplicationUpdateCacheMut.Lock()
		jobApplicationUpdateCache[key] = cache
		jobApplicationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q jobApplicationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for job_applications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for job_applications")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JobApplicationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobApplicationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"job_applications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, jobApplicationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in jobApplication slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all jobApplication")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JobApplication) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no job_applications provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(jobApplicationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jobApplicationUpsertCacheMut.RLock()
	cache, cached := jobApplicationUpsertCache[key]
	jobApplicationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			jobApplicationAllColumns,
			jobApplicationColumnsWithDefault,
			jobApplicationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			jobApplicationAllColumns,
			jobApplicationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert job_applications, could not build update column list")
		}

		ret := strmangle.SetComplement(jobApplicationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(jobApplicationPrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert job_applications, could not build conflict column list")
			}

			conflict = make([]string, len(jobApplicationPrimaryKeyColumns))
			copy(conflict, jobApplicationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"job_applications\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(jobApplicationType, jobApplicationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jobApplicationType, jobApplicationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert job_applications")
	}

	if !cached {
		jobApplicationUpsertCacheMut.Lock()
		jobApplicationUpsertCache[key] = cache
		jobApplicationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single JobApplication record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JobApplication) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no JobApplication provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jobApplicationPrimaryKeyMapping)
	sql := "DELETE FROM \"job_applications\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from job_applications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for job_applications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q jobApplicationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no jobApplicationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from job_applications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for job_applications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JobApplicationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobApplicationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"job_applications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jobApplicationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from jobApplication slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for job_applications")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JobApplication) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJobApplication(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JobApplicationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JobApplicationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobApplicationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"job_applications\".* FROM \"job_applications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jobApplicationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in JobApplicationSlice")
	}

	*o = slice

	return nil
}

// JobApplicationExists checks if the JobApplication row exists.
func JobApplicationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"job_applications\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if job_applications exists")
	}

	return exists, nil
}

// Exists checks if the JobApplication row exists.
func (o *JobApplication) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return JobApplicationExists(ctx, exec, o.ID)
}
