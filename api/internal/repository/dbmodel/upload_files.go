// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// UploadFile is an object representing the database table.
type UploadFile struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CandidateID int64     `boil:"candidate_id" json:"candidate_id" toml:"candidate_id" yaml:"candidate_id"`
	FileURL     string    `boil:"file_url" json:"file_url" toml:"file_url" yaml:"file_url"`
	Status      string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *uploadFileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uploadFileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UploadFileColumns = struct {
	ID          string
	CandidateID string
	FileURL     string
	Status      string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	CandidateID: "candidate_id",
	FileURL:     "file_url",
	Status:      "status",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var UploadFileTableColumns = struct {
	ID          string
	CandidateID string
	FileURL     string
	Status      string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "upload_files.id",
	CandidateID: "upload_files.candidate_id",
	FileURL:     "upload_files.file_url",
	Status:      "upload_files.status",
	CreatedAt:   "upload_files.created_at",
	UpdatedAt:   "upload_files.updated_at",
}

// Generated where

var UploadFileWhere = struct {
	ID          whereHelperint64
	CandidateID whereHelperint64
	FileURL     whereHelperstring
	Status      whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"upload_files\".\"id\""},
	CandidateID: whereHelperint64{field: "\"upload_files\".\"candidate_id\""},
	FileURL:     whereHelperstring{field: "\"upload_files\".\"file_url\""},
	Status:      whereHelperstring{field: "\"upload_files\".\"status\""},
	CreatedAt:   whereHelpertime_Time{field: "\"upload_files\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"upload_files\".\"updated_at\""},
}

// UploadFileRels is where relationship names are stored.
var UploadFileRels = struct {
	Candidate string
}{
	Candidate: "Candidate",
}

// uploadFileR is where relationships are stored.
type uploadFileR struct {
	Candidate *Candidate `boil:"Candidate" json:"Candidate" toml:"Candidate" yaml:"Candidate"`
}

// NewStruct creates a new relationship struct
func (*uploadFileR) NewStruct() *uploadFileR {
	return &uploadFileR{}
}

func (o *UploadFile) GetCandidate() *Candidate {
	if o == nil {
		return nil
	}

	return o.R.GetCandidate()
}

func (r *uploadFileR) GetCandidate() *Candidate {
	if r == nil {
		return nil
	}

	return r.Candidate
}

// uploadFileL is where Load methods for each relationship are stored.
type uploadFileL struct{}

var (
	uploadFileAllColumns            = []string{"id", "candidate_id", "file_url", "status", "created_at", "updated_at"}
	uploadFileColumnsWithoutDefault = []string{"id", "candidate_id", "file_url", "status"}
	uploadFileColumnsWithDefault    = []string{"created_at", "updated_at"}
	uploadFilePrimaryKeyColumns     = []string{"id"}
	uploadFileGeneratedColumns      = []string{}
)

type (
	// UploadFileSlice is an alias for a slice of pointers to UploadFile.
	// This should almost always be used instead of []UploadFile.
	UploadFileSlice []*UploadFile

	uploadFileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uploadFileType                 = reflect.TypeOf(&UploadFile{})
	uploadFileMapping              = queries.MakeStructMapping(uploadFileType)
	uploadFilePrimaryKeyMapping, _ = queries.BindMapping(uploadFileType, uploadFileMapping, uploadFilePrimaryKeyColumns)
	uploadFileInsertCacheMut       sync.RWMutex
	uploadFileInsertCache          = make(map[string]insertCache)
	uploadFileUpdateCacheMut       sync.RWMutex
	uploadFileUpdateCache          = make(map[string]updateCache)
	uploadFileUpsertCacheMut       sync.RWMutex
	uploadFileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single uploadFile record from the query.
func (q uploadFileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UploadFile, error) {
	o := &UploadFile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for upload_files")
	}

	return o, nil
}

// All returns all UploadFile records from the query.
func (q uploadFileQuery) All(ctx context.Context, exec boil.ContextExecutor) (UploadFileSlice, error) {
	var o []*UploadFile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to UploadFile slice")
	}

	return o, nil
}

// Count returns the count of all UploadFile records in the query.
func (q uploadFileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count upload_files rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q uploadFileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if upload_files exists")
	}

	return count > 0, nil
}

// Candidate pointed to by the foreign key.
func (o *UploadFile) Candidate(mods ...qm.QueryMod) candidateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CandidateID),
	}

	queryMods = append(queryMods, mods...)

	return Candidates(queryMods...)
}

// LoadCandidate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (uploadFileL) LoadCandidate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUploadFile interface{}, mods queries.Applicator) error {
	var slice []*UploadFile
	var object *UploadFile

	if singular {
		var ok bool
		object, ok = maybeUploadFile.(*UploadFile)
		if !ok {
			object = new(UploadFile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUploadFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUploadFile))
			}
		}
	} else {
		s, ok := maybeUploadFile.(*[]*UploadFile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUploadFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUploadFile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &uploadFileR{}
		}
		args[object.CandidateID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadFileR{}
			}

			args[obj.CandidateID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`candidates`),
		qm.WhereIn(`candidates.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Candidate")
	}

	var resultSlice []*Candidate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Candidate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for candidates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for candidates")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Candidate = foreign
		if foreign.R == nil {
			foreign.R = &candidateR{}
		}
		foreign.R.UploadFiles = append(foreign.R.UploadFiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CandidateID == foreign.ID {
				local.R.Candidate = foreign
				if foreign.R == nil {
					foreign.R = &candidateR{}
				}
				foreign.R.UploadFiles = append(foreign.R.UploadFiles, local)
				break
			}
		}
	}

	return nil
}

// SetCandidate of the uploadFile to the related item.
// Sets o.R.Candidate to related.
// Adds o to related.R.UploadFiles.
func (o *UploadFile) SetCandidate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Candidate) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upload_files\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"candidate_id"}),
		strmangle.WhereClause("\"", "\"", 2, uploadFilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CandidateID = related.ID
	if o.R == nil {
		o.R = &uploadFileR{
			Candidate: related,
		}
	} else {
		o.R.Candidate = related
	}

	if related.R == nil {
		related.R = &candidateR{
			UploadFiles: UploadFileSlice{o},
		}
	} else {
		related.R.UploadFiles = append(related.R.UploadFiles, o)
	}

	return nil
}

// UploadFiles retrieves all the records using an executor.
func UploadFiles(mods ...qm.QueryMod) uploadFileQuery {
	mods = append(mods, qm.From("\"upload_files\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"upload_files\".*"})
	}

	return uploadFileQuery{q}
}

// FindUploadFile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUploadFile(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UploadFile, error) {
	uploadFileObj := &UploadFile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"upload_files\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, uploadFileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from upload_files")
	}

	return uploadFileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UploadFile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no upload_files provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadFileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uploadFileInsertCacheMut.RLock()
	cache, cached := uploadFileInsertCache[key]
	uploadFileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uploadFileAllColumns,
			uploadFileColumnsWithDefault,
			uploadFileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uploadFileType, uploadFileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uploadFileType, uploadFileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"upload_files\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"upload_files\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into upload_files")
	}

	if !cached {
		uploadFileInsertCacheMut.Lock()
		uploadFileInsertCache[key] = cache
		uploadFileInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UploadFile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UploadFile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	uploadFileUpdateCacheMut.RLock()
	cache, cached := uploadFileUpdateCache[key]
	uploadFileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uploadFileAllColumns,
			uploadFilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update upload_files, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"upload_files\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, uploadFilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uploadFileType, uploadFileMapping, append(wl, uploadFilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update upload_files row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for upload_files")
	}

	if !cached {
		uploadFileUpdateCacheMut.Lock()
		uploadFileUpdateCache[key] = cache
		uploadFileUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q uploadFileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for upload_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for upload_files")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UploadFileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"upload_files\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, uploadFilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in uploadFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all uploadFile")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UploadFile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no upload_files provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadFileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uploadFileUpsertCacheMut.RLock()
	cache, cached := uploadFileUpsertCache[key]
	uploadFileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			uploadFileAllColumns,
			uploadFileColumnsWithDefault,
			uploadFileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			uploadFileAllColumns,
			uploadFilePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert upload_files, could not build update column list")
		}

		ret := strmangle.SetComplement(uploadFileAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(uploadFilePrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert upload_files, could not build conflict column list")
			}

			conflict = make([]string, len(uploadFilePrimaryKeyColumns))
			copy(conflict, uploadFilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"upload_files\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(uploadFileType, uploadFileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uploadFileType, uploadFileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert upload_files")
	}

	if !cached {
		uploadFileUpsertCacheMut.Lock()
		uploadFileUpsertCache[key] = cache
		uploadFileUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UploadFile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UploadFile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no UploadFile provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uploadFilePrimaryKeyMapping)
	sql := "DELETE FROM \"upload_files\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from upload_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for upload_files")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uploadFileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no uploadFileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from upload_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for upload_files")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UploadFileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"upload_files\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadFilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from uploadFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for upload_files")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UploadFile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUploadFile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadFileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UploadFileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"upload_files\".* FROM \"upload_files\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadFilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in UploadFileSlice")
	}

	*o = slice

	return nil
}

// UploadFileExists checks if the UploadFile row exists.
func UploadFileExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"upload_files\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if upload_files exists")
	}

	return exists, nil
}

// Exists checks if the UploadFile row exists.
func (o *UploadFile) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UploadFileExists(ctx, exec, o.ID)
}
